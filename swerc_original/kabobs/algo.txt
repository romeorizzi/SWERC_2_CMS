Each rule u>v can be represented with an automaton that has |u|+|v|
states and 2(|u|+|v|-1) "named" transitions plus a default transition
(that match anything not named) per state.

When joining two automata (V_1,E_1) and (V_2,E_2) the result can
contain (V_1×V_2) states but the number of named transitions for a
state (v_1,v_2) is at most (t_1+t_2) (t_i is the number of named
transitions for v_i).  Therefore the number of named transitions is
V_1×E_2 + V_2×E_1 which shows that the number of named transitions
stays O(V) (where V is the number of states of the product automaton).


How many named transitions with a ruleset of size S ?

If have a ruleset: u_1>v_1| ... |u_k>v_k
then (Σ |u_1v_1|+2)-1 ≤ S thus
Σ|u_1v_1|+2 ≤ S+1

to maximimze Π x_i with Σ x_i+2 ≤ S+1 the x_i are all equal 

def p(k):
   r = 0 
   for i in range(k):
        r = max(r,( i**(k/(i+2)) ))
   return r

for k in range(40,61):
  print(str(k) + " " +str( p(k)))

gives

40 10321.273240738805
41 13003.989417723486
42 16384.0
43 20642.54648147761
44 26007.97883544697
45 32768.0
46 41285.09296295522
47 52015.95767089394
48 65536.0
49 82570.18592591034
50 104031.915341788
51 131072.0
52 165140.37185182067
53 208063.830683576
54 262144.0
55 330280.74370364135
56 416127.661367152
57 524288.0
58 660561.4874072827
59 832255.322734304
60 1048576.0

How many states?

A state is entirely determined by which rules are pending (i.e. u is
satisfied before but not v) and the maximal prefix shared between a
rule and letters therefore if there is R rules and a total size of K we have
2^R×K accessible states at most

